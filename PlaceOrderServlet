package LoginServletUni;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.sql.*;
import util.DBConnection;

@WebServlet("/PlaceOrderServlet")
public class PlaceOrderServlet extends HttpServlet {

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();

        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("username") == null) {
            response.sendRedirect("customer_login.jsp");
            return;
        }

        String username = (String) session.getAttribute("username");

        try (Connection conn = DBConnection.createConnection()) {

            // 1. Get custID from username
            PreparedStatement userStmt = conn.prepareStatement("SELECT custID FROM CUSTOMERS WHERE username = ?");
            userStmt.setString(1, username);
            ResultSet rs = userStmt.executeQuery();

            int custID = -1;
            if (rs.next()) {
                custID = rs.getInt("custID");
            } else {
                out.println("User not found");
                return;
            }

            // 2. Retrieve merchIDs and quantities from form
            String[] merchIDs = request.getParameterValues("merchID");
            String[] quantities = request.getParameterValues("quantity");

            if (merchIDs == null || quantities == null || merchIDs.length != quantities.length) {
                out.println("Invalid input data.");
                return;
            }

            // 3. Calculate total price
            double totalPrice = 0.0;
            for (int i = 0; i < merchIDs.length; i++) {
                int merchID = Integer.parseInt(merchIDs[i]);
                int qty = Integer.parseInt(quantities[i]);

                PreparedStatement priceStmt = conn.prepareStatement("SELECT merchPrice FROM MERCHANDISE WHERE merchID = ?");
                priceStmt.setInt(1, merchID);
                ResultSet priceRs = priceStmt.executeQuery();

                if (priceRs.next()) {
                    double price = priceRs.getDouble("merchPrice");
                    totalPrice += price * qty;
                }
            }

            // 4. Insert into ORDERS
            PreparedStatement orderStmt = conn.prepareStatement(
                "INSERT INTO ORDERS (custID, totalPrice, orderDate, orderStatus) VALUES (?, ?, CURRENT_DATE, ?)",
                Statement.RETURN_GENERATED_KEYS);
            orderStmt.setInt(1, custID);
            orderStmt.setDouble(2, totalPrice);
            orderStmt.setString(3, "Pending");
            orderStmt.executeUpdate();

            ResultSet orderRs = orderStmt.getGeneratedKeys();
            int orderID = -1;
            if (orderRs.next()) {
                orderID = orderRs.getInt(1);
            }

            // 5. Insert into ORDER_MERCH
            PreparedStatement itemStmt = conn.prepareStatement(
                "INSERT INTO ORDER_MERCH (custID, orderID, merchID, merchQty) VALUES (?, ?, ?, ?)");

            for (int i = 0; i < merchIDs.length; i++) {
                int merchID = Integer.parseInt(merchIDs[i]);
                int qty = Integer.parseInt(quantities[i]);

                itemStmt.setInt(1, custID);
                itemStmt.setInt(2, orderID);
                itemStmt.setInt(3, merchID);
                itemStmt.setInt(4, qty);
                itemStmt.addBatch();
            }

            itemStmt.executeBatch();

            session.setAttribute("orderID", orderID);
            response.sendRedirect("orderSummary.jsp");

        } catch (Exception e) {
            out.println("Error: " + e.getMessage());
        }
    }
}
